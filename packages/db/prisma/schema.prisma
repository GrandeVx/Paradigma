// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * Whitelist for users who can access the app before it's released
 */
model Whitelist {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("whitelist")
}

enum SubscriptionStatus {
  FREE
  TRIAL
  ACTIVE
  EXPIRED
  CANCELLED
}

model User {
  id                String    @id @unique @default(uuid())
  username          String?   @unique
  email             String    @unique
  emailVerified     Boolean   @default(false)
  phone             String?   @unique
  name              String?
  image             String?
  language          String?   @default("en") @map("language")
  notifications     Boolean   @default(true) @map("notifications")
  notificationToken String?   @map("notification_token")
  isDeleted         Boolean   @default(false) @map("is_deleted")
  deletedAt         DateTime? @map("deleted_at")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Subscription fields
  isPremium             Boolean            @default(false) @map("is_premium")
  subscriptionStatus    SubscriptionStatus @default(FREE) @map("subscription_status")
  subscriptionStartDate DateTime?          @map("subscription_start_date")
  subscriptionEndDate   DateTime?          @map("subscription_end_date")
  trialEndDate          DateTime?          @map("trial_end_date")
  superwallCustomerId   String?            @map("superwall_customer_id")

  // Better Auth Relations
  sessions Session[]
  accounts Account[]

  // Custom Relations

  @@index([id])
  @@index([isPremium])
  @@index([subscriptionStatus])
  @@index([superwallCustomerId])
  @@map("user")
}

/**
 * Better Auth Session
 */
model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

/**
 * Better Auth Account
 */
model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

/**
 * Better Auth Verification
 */
model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}
