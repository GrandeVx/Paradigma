// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Whitelist for users who can access the app before it's released
model Whitelist {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("whitelist")
}

// Subscription status
enum SubscriptionStatus {
  FREE
  TRIAL
  ACTIVE
  EXPIRED
  CANCELLED
}

model User {
  id                String    @id @unique @default(uuid())
  username          String?   @unique
  email             String    @unique
  emailVerified     Boolean   @default(false)
  phone             String?   @unique
  name              String?
  image             String?
  language          String?   @default("en") @map("language")
  notifications     Boolean   @default(true) @map("notifications")
  notificationToken String?   @map("notification_token")
  isDeleted         Boolean   @default(false) @map("is_deleted")
  deletedAt         DateTime? @map("deleted_at")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Subscription fields
  isPremium             Boolean            @default(false) @map("is_premium")
  subscriptionStatus    SubscriptionStatus @default(FREE) @map("subscription_status")
  subscriptionStartDate DateTime?          @map("subscription_start_date")
  subscriptionEndDate   DateTime?          @map("subscription_end_date")
  trialEndDate          DateTime?          @map("trial_end_date")
  superwallCustomerId   String?            @map("superwall_customer_id")

  // Better Auth Relations
  sessions Session[]
  accounts Account[]

  // Custom Relations
  // Social platform relations
  posts             Post[]
  likes             Like[]
  comments          Comment[]
  groupsOwned       Group[]           @relation("GroupOwner")
  groupMemberships  GroupMember[]
  groupJoinRequests GroupJoinRequest[]

  @@index([id])
  @@index([isPremium])
  @@index([subscriptionStatus])
  @@index([superwallCustomerId])
  @@map("user")
}

// Better Auth Session
model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

// Better Auth Account
model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

// Better Auth Verification
model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

// Social Platform Models

// Groups where users can create posts
model Group {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  isPublic    Boolean  @default(true) @map("is_public")
  image       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  ownerId String @map("owner_id")
  owner   User   @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  members      GroupMember[]
  posts        Post[]
  joinRequests GroupJoinRequest[]

  @@index([ownerId])
  @@index([createdAt])
  @@index([isPublic])
  @@map("group")
}

// Group membership table
model GroupMember {
  id        String   @id @default(uuid())
  joinedAt  DateTime @default(now()) @map("joined_at")
  role      String   @default("member") // member, moderator, admin
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  userId  String @map("user_id")
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId String @map("group_id")
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([groupId])
  @@index([userId])
  @@index([joinedAt])
  @@map("group_member")
}

// Requests to join private groups
model GroupJoinRequest {
  id        String              @id @default(uuid())
  message   String?             @db.Text
  status    GroupRequestStatus  @default(PENDING)
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @updatedAt @map("updated_at")

  // Relations
  userId  String @map("user_id")
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId String @map("group_id")
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([groupId, status])
  @@index([userId])
  @@index([createdAt])
  @@map("group_join_request")
}

// Text posts in groups
model Post {
  id        String   @id @default(uuid())
  content   String   @db.Text
  isPublic  Boolean  @default(true) @map("is_public")
  isDeleted Boolean  @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  groupId  String @map("group_id")
  group    Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]

  @@index([authorId])
  @@index([groupId])
  @@index([createdAt])
  @@index([isDeleted])
  @@map("post")
}

// Likes on posts
model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([createdAt])
  @@map("like")
}

// Comments on posts
model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  isDeleted Boolean  @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId   String @map("post_id")
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Comment threading (optional for future)
  parentId String?   @map("parent_id")
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([authorId])
  @@index([createdAt])
  @@index([parentId])
  @@index([isDeleted])
  @@map("comment")
}

// Enums
enum GroupRequestStatus {
  PENDING
  APPROVED
  REJECTED
}
